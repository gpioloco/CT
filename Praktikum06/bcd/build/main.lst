


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       ------------
    2 00000000         ; --  _____       ______  _____                         
                                  -
    3 00000000         ; -- |_   _|     |  ____|/ ____|                        
                                  -
    4 00000000         ; --   | |  _ __ | |__  | (___    Institute of Embedded 
                       Systems    -
    5 00000000         ; --   | | | '_ \|  __|  \___ \   Zurich University of  
                                  -
    6 00000000         ; --  _| |_| | | | |____ ____) |  Applied Sciences      
                                  -
    7 00000000         ; -- |_____|_| |_|______|_____/   8401 Winterthur, Switz
                       erland     -
    8 00000000         ; ------------------------------------------------------
                       ------------
    9 00000000         ; --
   10 00000000         ; -- main.s
   11 00000000         ; --
   12 00000000         ; -- CT1 P06 "ALU und Sprungbefehle" mit MUL
   13 00000000         ; --
   14 00000000         ; -- $Id: main.s 4857 2019-09-10 17:30:17Z akdi $
   15 00000000         ; ------------------------------------------------------
                       ------------
   16 00000000         ;Directives
   17 00000000                 PRESERVE8
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ; ------------------------------------------------------
                       ------------
   21 00000000         ; -- Address Defines
   22 00000000         ; ------------------------------------------------------
                       ------------
   23 00000000         
   24 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   25 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   26 00000000 60000200 
                       ADDR_DIP_SWITCH_7_0
                               EQU              0x60000200
   27 00000000 60000201 
                       ADDR_DIP_SWITCH_15_8
                               EQU              0x60000201
   28 00000000 60000114 
                       ADDR_7_SEG_BIN_DS3_0
                               EQU              0x60000114
   29 00000000 60000210 
                       ADDR_BUTTONS
                               EQU              0x60000210
   30 00000000         
   31 00000000 60000340 
                       ADDR_LCD_RED
                               EQU              0x60000340
   32 00000000 60000342 
                       ADDR_LCD_GREEN
                               EQU              0x60000342



ARM Macro Assembler    Page 2 


   33 00000000 60000344 
                       ADDR_LCD_BLUE
                               EQU              0x60000344
   34 00000000 0000FFFF 
                       LCD_BACKLIGHT_FULL
                               EQU              0xffff
   35 00000000 00000000 
                       LCD_BACKLIGHT_OFF
                               EQU              0x0000
   36 00000000         
   37 00000000         ; ------------------------------------------------------
                       ------------
   38 00000000         ; -- myCode
   39 00000000         ; ------------------------------------------------------
                       ------------
   40 00000000                 AREA             myCode, CODE, READONLY
   41 00000000         
   42 00000000                 ENTRY
   43 00000000         
   44 00000000         main    PROC
   45 00000000                 export           main
   46 00000000         
   47 00000000         ; STUDENTS: To be programmed
   48 00000000         ; Maskierung der Einer 
   49 00000000 4824            LDR              r0, =ADDR_DIP_SWITCH_7_0
   50 00000002 7800            LDRB             r0, [r0, #0]
   51 00000004 210F            MOVS             r1, #0x0F
   52 00000006 4008            ANDS             r0, r1
   53 00000008         
   54 00000008         ; Maskierung der 10er
   55 00000008 4A23            LDR              r2, =ADDR_DIP_SWITCH_15_8
   56 0000000A 7812            LDRB             r2, [r2, #0]
   57 0000000C 400A            ANDS             r2, r1
   58 0000000E         
   59 0000000E         ; Kopieren und Shiften von 10er
   60 0000000E 0013            MOVS             r3, r2
   61 00000010 011B            LSLS             r3, #4
   62 00000012         
   63 00000012         ; Concat r3 with r0
   64 00000012 4303            ORRS             r3, r3, r0
   65 00000014         
   66 00000014         ; Store values in LEDs
   67 00000014 4C21            LDR              r4, =ADDR_LED_15_0
   68 00000016 7023            STRB             r3, [r4, #0]
   69 00000018         
   70 00000018 4F21            LDR              r7, =ADDR_BUTTONS
   71 0000001A 783F            LDRB             r7, [r7, #0]
   72 0000001C 2601            MOVS             r6, #0x01   ; Man anded
   73 0000001E 4237            TST              r7, r6
   74 00000020 D00B            BEQ              sprungWennNichtT0 ;Button ist n
                                                            icht gedrueckt dann
                                                             macht man das dann
                                                             mit MULS
   75 00000022         ;Multiplikation von 10er mal 10
   76 00000022 4E20            LDR              r6, =ADDR_LCD_RED
   77 00000024 4F20            LDR              r7, =LCD_BACKLIGHT_FULL
   78 00000026 8037            STRH             r7, [r6, #0]
   79 00000028 4F20            LDR              r7, =LCD_BACKLIGHT_OFF ; Quer a
                                                            usschalten von Lich



ARM Macro Assembler    Page 3 


                                                            tern
   80 0000002A 80B7            STRH             r7, [r6, #4]
   81 0000002C 2500            MOVS             r5, #0x0
   82 0000002E 0052            LSLS             r2, #1
   83 00000030 18AD            ADDS             r5, r2
   84 00000032 0092            LSLS             r2, #2      ; mal 
   85 00000034 18AD            ADDS             r5, r2
   86 00000036 182D            ADDS             r5, r0
   87 00000038         
   88 00000038 E007            B                rausAusAnweisung
   89 0000003A         sprungWennNichtT0
   90 0000003A         ;Multiplikation von 10er mal 10
   91 0000003A 4E1A            LDR              r6, =ADDR_LCD_RED
   92 0000003C 4F1A            LDR              r7, =LCD_BACKLIGHT_FULL
   93 0000003E 80B7            STRH             r7, [r6, #4]
   94 00000040 4F1A            LDR              r7, =LCD_BACKLIGHT_OFF
   95 00000042 8037            STRH             r7, [r6, #0]
   96 00000044 250A            MOVS             r5, #0xa
   97 00000046 4355            MULS             r5, r2, r5
   98 00000048 182D            ADDS             r5, r0
   99 0000004A         
  100 0000004A         rausAusAnweisung
  101 0000004A         ;7Seg laden 
  102 0000004A 4E19            LDR              r6, =ADDR_7_SEG_BIN_DS3_0
  103 0000004C 7075            STRB             r5, [r6, #1] ; Die 7 Segment 2e
                                                            r Bloecke haben nur
                                                             einen Abstand von 
                                                            1 Byte  
  104 0000004E 7033            STRB             r3, [r6, #0] ;Hier wird Dezimal
                                                             angzeeigt und zwar
                                                             auf DS1 und DS0
  105 00000050         
  106 00000050         ;Bin?rwert in den LEDs anzeigen 8-15
  107 00000050 7065            STRB             r5, [r4, #1] ;Bin?rvalue in LED
                                                            s gespeichert.
  108 00000052         
  109 00000052         
  110 00000052         ;Aufgabe 2a Anzahl Bits vom Bin?ryvalue wird angezeigt
  111 00000052 4E18            LDR              r6, =ADDR_LED_31_16
  112 00000054 4F15            LDR              r7, =0x0
  113 00000056 4B18            LDR              r3, =0x1
  114 00000058         forIter
  115 00000058 086D            LSRS             r5, #1
  116 0000005A D301            BCC              carryBitNotSet
  117 0000005C 007F            LSLS             r7, #1      ;Linksshift 
  118 0000005E 18FF            ADDS             r7, r7, r3  ;Zum Block wird ein
                                                             dazu gerechnet
  119 00000060         carryBitNotSet
  120 00000060 2D00            cmp              r5, #0      ; Conidtion wenn ni
                                                            cht gleich 0 dann z
                                                            ur Loop, wenn != 0 
                                                            dann ueberspringt e
                                                            s die Loop
  121 00000062 D000            BEQ              binaryValue0
  122 00000064 E7F8            B                forIter
  123 00000066         binaryValue0
  124 00000066 8037            STRH             r7, [r6, #0]
  125 00000068         
  126 00000068         ; Rotation der LED-Lampen Aufgabe 2b)



ARM Macro Assembler    Page 4 


  127 00000068 003C            MOVS             r4, r7      ; r4 ist das zwisch
                                                            enresultat -> wird 
                                                            kopiert also r7
  128 0000006A 0424            LSLS             r4, #16     ; von rechts nach l
                                                            inks schieben
  129 0000006C 433C            ORRS             r4, r7      ;OR erzeugt in dies
                                                            em Fall, dass das n
                                                            ?chste Null als 1 g
                                                            ezeigt wird
  130 0000006E         
  131 0000006E 4A12            LDR              r2, =1      ; Lade das Literal 
                                                            1
  132 00000070 4F12            LDR              r7, =16     ; Lade das Literal 
                                                            16 
  133 00000072 2F00    rot     CMP              r7, #0      ; as long as R3 > 0
                                                            
  134 00000074 D005            BEQ              end_rot
  135 00000076 F7FF FFFE       BL               pause
  136 0000007A 41D4            RORS             r4, r2      ;Rotation rechts un
                                                            d das Bit das gesch
                                                            oben wird, geht auc
                                                            h ins Carrybit
  137 0000007C 8034            STRH             r4, [r6, #0] ;Value wird in de 
                                                            Adresse gespeichert
                                                            .  
  138 0000007E 3F01            SUBS             r7, #1      ;Das es fliessent a
                                                            ussieht, wird vom b
                                                            lock immer ein subt
                                                            rahiert
  139 00000080 E7F7            B                rot
  140 00000082         
  141 00000082 BF00    end_rot NOP
  142 00000084         ; END: To be programmed
  143 00000084         
  144 00000084 E7FE            B                main
  145 00000086                 ENDP
  146 00000086         
  147 00000086         ;----------------------------------------------------
  148 00000086         ; Subroutines
  149 00000086         ;----------------------------------------------------
  150 00000086         
  151 00000086         ;----------------------------------------------------
  152 00000086         ; pause for disco_lights
  153 00000086         pause   PROC
  154 00000086 B403            PUSH             {R0, R1}
  155 00000088 490B            LDR              R1, =1
  156 0000008A 480D            LDR              R0, =0x000FFFFF
  157 0000008C         
  158 0000008C         loop
  159 0000008C 1A40            SUBS             R0, R0, R1
  160 0000008E D2FD            BCS              loop
  161 00000090         
  162 00000090 BC03            POP              {R0, R1}
  163 00000092 4770            BX               LR
  164 00000094                 ALIGN
  165 00000094                 ENDP
  166 00000094         
  167 00000094         ; ------------------------------------------------------
                       ------------



ARM Macro Assembler    Page 5 


  168 00000094         ; End of code
  169 00000094         ; ------------------------------------------------------
                       ------------
  170 00000094                 END
              60000200 
              60000201 
              60000100 
              60000210 
              60000340 
              0000FFFF 
              00000000 
              60000114 
              60000102 
              00000001 
              00000010 
              000FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\build\main.d -o.\build\main.o -I.\RTE\_Target_1 -IC:\Users\gpiol
\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include -IC:\Users\gpi
ol\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include\m0 -IC:\User
s\gpiol\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\HAL\Include --predefin
e="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="_RTE_ S
ETA 1" --predefine="_RTE_ SETA 1" --list=.\build\main.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

binaryValue0 00000066

Symbol: binaryValue0
   Definitions
      At line 123 in file app\main.s
   Uses
      At line 121 in file app\main.s
Comment: binaryValue0 used once
carryBitNotSet 00000060

Symbol: carryBitNotSet
   Definitions
      At line 119 in file app\main.s
   Uses
      At line 116 in file app\main.s
Comment: carryBitNotSet used once
end_rot 00000082

Symbol: end_rot
   Definitions
      At line 141 in file app\main.s
   Uses
      At line 134 in file app\main.s
Comment: end_rot used once
forIter 00000058

Symbol: forIter
   Definitions
      At line 114 in file app\main.s
   Uses
      At line 122 in file app\main.s
Comment: forIter used once
loop 0000008C

Symbol: loop
   Definitions
      At line 158 in file app\main.s
   Uses
      At line 160 in file app\main.s
Comment: loop used once
main 00000000

Symbol: main
   Definitions
      At line 44 in file app\main.s
   Uses
      At line 45 in file app\main.s
      At line 144 in file app\main.s

myCode 00000000

Symbol: myCode
   Definitions
      At line 40 in file app\main.s
   Uses
      None
Comment: myCode unused
pause 00000086




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: pause
   Definitions
      At line 153 in file app\main.s
   Uses
      At line 135 in file app\main.s
Comment: pause used once
rausAusAnweisung 0000004A

Symbol: rausAusAnweisung
   Definitions
      At line 100 in file app\main.s
   Uses
      At line 88 in file app\main.s
Comment: rausAusAnweisung used once
rot 00000072

Symbol: rot
   Definitions
      At line 133 in file app\main.s
   Uses
      At line 139 in file app\main.s
Comment: rot used once
sprungWennNichtT0 0000003A

Symbol: sprungWennNichtT0
   Definitions
      At line 89 in file app\main.s
   Uses
      At line 74 in file app\main.s
Comment: sprungWennNichtT0 used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS3_0 60000114

Symbol: ADDR_7_SEG_BIN_DS3_0
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 102 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS3_0 used once
ADDR_BUTTONS 60000210

Symbol: ADDR_BUTTONS
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 70 in file app\main.s
Comment: ADDR_BUTTONS used once
ADDR_DIP_SWITCH_15_8 60000201

Symbol: ADDR_DIP_SWITCH_15_8
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 55 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_8 used once
ADDR_DIP_SWITCH_7_0 60000200

Symbol: ADDR_DIP_SWITCH_7_0
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 49 in file app\main.s
Comment: ADDR_DIP_SWITCH_7_0 used once
ADDR_LCD_BLUE 60000344

Symbol: ADDR_LCD_BLUE
   Definitions
      At line 33 in file app\main.s
   Uses
      None
Comment: ADDR_LCD_BLUE unused
ADDR_LCD_GREEN 60000342

Symbol: ADDR_LCD_GREEN
   Definitions
      At line 32 in file app\main.s
   Uses
      None
Comment: ADDR_LCD_GREEN unused
ADDR_LCD_RED 60000340

Symbol: ADDR_LCD_RED
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 76 in file app\main.s
      At line 91 in file app\main.s

ADDR_LED_15_0 60000100




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: ADDR_LED_15_0
   Definitions
      At line 24 in file app\main.s
   Uses
      At line 67 in file app\main.s
Comment: ADDR_LED_15_0 used once
ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 111 in file app\main.s
Comment: ADDR_LED_31_16 used once
LCD_BACKLIGHT_FULL 0000FFFF

Symbol: LCD_BACKLIGHT_FULL
   Definitions
      At line 34 in file app\main.s
   Uses
      At line 77 in file app\main.s
      At line 92 in file app\main.s

LCD_BACKLIGHT_OFF 00000000

Symbol: LCD_BACKLIGHT_OFF
   Definitions
      At line 35 in file app\main.s
   Uses
      At line 79 in file app\main.s
      At line 94 in file app\main.s

11 symbols
357 symbols in table
